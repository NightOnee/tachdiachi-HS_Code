import streamlit as st
import pandas as pd
import json
import re
import random
import google.generativeai as genai

# ==============================================================================
# PH·∫¶N BACK-END: G·ªåI API C·ª¶A GOOGLE GEMINI
# ==============================================================================

def call_gemini_api(prompt_template, user_input):
    """
    H√†m g·ªçi API c·ªßa Google Gemini v√† x·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ.
    """
    try:
        # B1: L·∫•y t·∫•t c·∫£ c√°c API key c√≥ trong file secrets v√† ch·ªçn ng·∫´u nhi√™n m·ªôt key
        # C√°c key trong file secrets.toml ph·∫£i c√≥ d·∫°ng GEMINI_API_KEY_1, GEMINI_API_KEY_2, ...
        api_keys = [value for key, value in st.secrets.items() if key.startswith("GEMINI_API_KEY_")]
        
        if not api_keys:
            st.error("Kh√¥ng t√¨m th·∫•y API key n√†o c√≥ ƒë·ªãnh d·∫°ng 'GEMINI_API_KEY_...' trong file secrets.toml.")
            return {"error": "L·ªói c·∫•u h√¨nh API Key."}
            
        selected_api_key = random.choice(api_keys)
        genai.configure(api_key=selected_api_key)


        # B2: Kh·ªüi t·∫°o m√¥ h√¨nh
        # S·ª≠ d·ª•ng Gemma 3 27B cho c√°c t√°c v·ª• x·ª≠ l√Ω vƒÉn b·∫£n ph·ª©c t·∫°p
        model = genai.GenerativeModel('gemma-3-27b-it')

        # B3: T·∫°o prompt ho√†n ch·ªânh
        full_prompt = prompt_template.format(user_input=user_input)

        # B4: G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini
        response = model.generate_content(full_prompt)
        
        # B5: X·ª≠ l√Ω v√† b√≥c t√°ch JSON t·ª´ k·∫øt qu·∫£ tr·∫£ v·ªÅ
        # Gemini th∆∞·ªùng tr·∫£ v·ªÅ JSON trong m·ªôt kh·ªëi m√£ markdown, c·∫ßn ph·∫£i b√≥c t√°ch n√≥ ra.
        response_text = response.text
        
        # C·ªë g·∫Øng t√¨m kh·ªëi JSON ƒë∆∞·ª£c bao b·ªçc b·ªüi ```json ... ```
        match = re.search(r"```json\n(.*?)\n```", response_text, re.DOTALL)
        if match:
            json_str = match.group(1)
        else:
            # N·∫øu kh√¥ng t√¨m th·∫•y, gi·∫£ ƒë·ªãnh to√†n b·ªô vƒÉn b·∫£n l√† m·ªôt chu·ªói JSON
            json_str = response_text

        # Chuy·ªÉn chu·ªói JSON th√†nh ƒë·ªëi t∆∞·ª£ng Python
        return json.loads(json_str)

    except Exception as e:
        # B·∫Øt c√°c l·ªói c√≥ th·ªÉ x·∫£y ra (API key sai, l·ªói m·∫°ng, v.v.)
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi g·ªçi API c·ªßa Gemini: {e}")
        return {"error": str(e)}


# ==============================================================================
# GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (FRONT-END S·ª¨ D·ª§NG STREAMLIT)
# ==============================================================================

st.set_page_config(page_title="Tr·ª£ l√Ω X·ª≠ l√Ω Th√¥ng tin Xu·∫•t kh·∫©u", layout="wide")

st.title("üöÄ Tr·ª£ l√Ω X·ª≠ l√Ω Th√¥ng tin Xu·∫•t kh·∫©u (v·ªõi Gemini AI)")
st.markdown("·ª®ng d·ª•ng n√†y h·ªó tr·ª£ hai t√°c v·ª•: **chu·∫©n h√≥a ƒë·ªãa ch·ªâ qu·ªëc t·∫ø** v√† **ho√†n thi·ªán th√¥ng tin h√†ng h√≥a xu·∫•t kh·∫©u**.")

# --- B1: NG∆Ø·ªúI D√ôNG CH·ªåN V·∫§N ƒê·ªÄ V√Ä ƒêI·ªÄN Y√äU C·∫¶U ---
st.sidebar.title("Ch·ªçn ch·ª©c nƒÉng")
app_mode = st.sidebar.selectbox(
    "Vui l√≤ng ch·ªçn t√°c v·ª• b·∫°n mu·ªën th·ª±c hi·ªán:",
    ["--Ch·ªçn--", "1. Chu·∫©n h√≥a ƒê·ªãa ch·ªâ", "2. Ho√†n thi·ªán Th√¥ng tin H√†ng h√≥a"]
)

# --- X·ª≠ l√Ω ch·ª©c nƒÉng 1: Chu·∫©n h√≥a ƒê·ªãa ch·ªâ ---
if app_mode == "1. Chu·∫©n h√≥a ƒê·ªãa ch·ªâ":
    st.header("1. Chu·∫©n h√≥a ƒê·ªãa ch·ªâ Qu·ªëc t·∫ø")
    st.info("D√°n ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß v√†o √¥ b√™n d∆∞·ªõi. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông b√≥c t√°ch, ƒë·ªëi chi·∫øu v√† tr·∫£ v·ªÅ th√¥ng tin ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a.")

    address_input = st.text_area(
        "Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß:",
        height=100,
        placeholder="V√≠ d·ª•: 221 - 310 STILLWATER DR SASKATOON SK S7J 4H7 CANADA"
    )

    if st.button("X·ª≠ l√Ω ƒê·ªãa ch·ªâ"):
        if address_input:
            with st.spinner("H·ªá th·ªëng ƒëang ph√¢n t√≠ch v√† x√°c th·ª±c ƒë·ªãa ch·ªâ..."):
                # Prompt ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ h∆∞·ªõng d·∫´n LLM ph√¢n t√≠ch ƒë·ªãa ch·ªâ
                address_prompt = """
                You are an expert address parser. Your task is to parse the raw address string into specific fields: Country, UPU Code, Postal Code, City, and State/Province. Then, verify the information for accuracy using your knowledge.
                Present the final, verified result as a single JSON object. The JSON keys must be: "country", "country_code_upu", "postal_code", "city", "state".

                Input address: '{user_input}'
                """
                response_data = call_gemini_api(address_prompt, address_input)

                st.subheader("K·∫øt qu·∫£ ph√¢n t√≠ch ƒë·ªãa ch·ªâ:")
                if "error" not in response_data:
                    st.success("Ph√¢n t√≠ch th√†nh c√¥ng!")
                    col1, col2 = st.columns(2)
                    col1.markdown(f"**Qu·ªëc gia:** `{response_data.get('country', 'N/A')}`")
                    col1.markdown(f"**T√™n vi·∫øt t·∫Øt (UPU):** `{response_data.get('country_code_upu', 'N/A')}`")
                    col1.markdown(f"**M√£ b∆∞u ch√≠nh:** `{response_data.get('postal_code', 'N/A')}`")
                    col2.markdown(f"**Th√†nh ph·ªë:** `{response_data.get('city', 'N/A')}`")
                    col2.markdown(f"**Bang/T·ªânh:** `{response_data.get('state', 'N/A')}`")
                # Kh√¥ng c·∫ßn hi·ªÉn th·ªã l·ªói ·ªü ƒë√¢y v√¨ h√†m call_gemini_api ƒë√£ d√πng st.error
        else:
            st.warning("Vui l√≤ng nh·∫≠p m·ªôt ƒë·ªãa ch·ªâ ƒë·ªÉ x·ª≠ l√Ω.")


# --- X·ª≠ l√Ω ch·ª©c nƒÉng 2: Ho√†n thi·ªán Th√¥ng tin H√†ng h√≥a ---
elif app_mode == "2. Ho√†n thi·ªán Th√¥ng tin H√†ng h√≥a":
    st.header("2. Ho√†n thi·ªán Th√¥ng tin H√†ng h√≥a Xu·∫•t kh·∫©u")
    st.info("D√°n danh s√°ch h√†ng h√≥a v√†o √¥ b√™n d∆∞·ªõi. H·ªá th·ªëng s·∫Ω t√¨m ki·∫øm v√† b·ªï sung c√°c th√¥ng tin c·∫ßn thi·∫øt cho n·ªôi dung h√†ng ho√° nh∆∞: **T√™n Ti·∫øng Anh c·ªßa s·∫£n ph·∫©m**, **HS Code**")

    products_input = st.text_area(
        "Nh·∫≠p danh s√°ch h√†ng ho√° (m·ªói h√†ng m·ªôt d√≤ng):",
        height=150,
        placeholder="V√≠ d·ª•:\nH·∫†T SEN SL:4 B·ªãch 1kg/b·ªãch\nH√ÄNH TƒÇM SL:2 B·ªãch 1.5kg/b·ªãch"
    )

    if st.button("T√¨m ki·∫øm th√¥ng tin t∆∞∆°ng ·ª©ng"):
        if products_input:
            with st.spinner("H·ªá th·ªëng ƒëang t√¨m ki·∫øm v√† t·ªïng h·ª£p th√¥ng tin h√†ng h√≥a..."):
                # Prompt ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ y√™u c·∫ßu LLM ƒëi·ªÅn v√†o c√°c tr∆∞·ªùng th√¥ng tin c·ª• th·ªÉ
                products_prompt = """
                You are an expert in international trade and customs data. For each product in the user's list, enrich it with details for export documents.
                Return a JSON list of objects. Each object must contain these exact keys: "T√äN H√ÄNG TI·∫æNG ANH", "T√äN H√ÄNG TI·∫æNG VI·ªÜT", "NH√Ä S·∫¢N XU·∫§T (TI·∫æNG ANH)", "N∆Ø·ªöC S·∫¢N XU·∫§T", "HS CODE", "S·ªê L∆Ø·ª¢NG", "QUY C√ÅCH S·∫¢N PH·∫®M", "QUY C√ÅCH ƒê√ìNG G√ìI".
                - HS CODE must be the most suitable 8 digit code, if not found try 6 digit code.
                - Assume 'N∆Ø·ªöC S·∫¢N XU·∫§T' is 'Vietnam'.
                - 'NH√Ä S·∫¢N XU·∫§T (TI·∫æNG ANH)' should be a plausible, fictional Vietnamese company name.
                - Extract quantity and packaging information from the user input.

                User's product list:
                {user_input}
                """
                response_data = call_gemini_api(products_prompt, products_input)

                st.subheader("B·∫£ng th√¥ng tin h√†ng h√≥a chi ti·∫øt:")
                if "error" not in response_data and isinstance(response_data, list):
                    st.success("Ho√†n thi·ªán th√¥ng tin th√†nh c√¥ng!")
                    df = pd.DataFrame(response_data)
                    column_order = [
                        "T√äN H√ÄNG TI·∫æNG ANH", "T√äN H√ÄNG TI·∫æNG VI·ªÜT",
                        "NH√Ä S·∫¢N XU·∫§T (TI·∫æNG ANH)", "N∆Ø·ªöC S·∫¢N XU·∫§T", "HS CODE",
                        "S·ªê L∆Ø·ª¢NG", "QUY C√ÅCH S·∫¢N PH·∫®M", "QUY C√ÅCH ƒê√ìNG G√ìI"
                    ]
                    # ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c c·ªôt ƒë·ªÅu t·ªìn t·∫°i tr∆∞·ªõc khi s·∫Øp x·∫øp
                    df_cols = [col for col in column_order if col in df.columns]
                    df = df[df_cols]
                    df.insert(0, 'STT', range(1, 1 + len(df)))
                    st.dataframe(df, use_container_width=True)
                # Kh√¥ng c·∫ßn hi·ªÉn th·ªã l·ªói ·ªü ƒë√¢y v√¨ h√†m call_gemini_api ƒë√£ d√πng st.error
        else:
            st.warning("Vui l√≤ng nh·∫≠p danh s√°ch h√†ng h√≥a ƒë·ªÉ x·ª≠ l√Ω.")

elif app_mode == "--Ch·ªçn--":
    st.markdown("### Vui l√≤ng ch·ªçn m·ªôt ch·ª©c nƒÉng t·ª´ thanh c√¥ng c·ª• b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

